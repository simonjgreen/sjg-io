---
export interface Props {
  text: string;
}

const { text } = Astro.props;
---

<button 
  class="copy-button inline-flex items-center gap-2 px-3 py-1.5 text-xs font-medium text-white/70 hover:text-white/90 bg-white/5 border border-white/10 rounded-md hover:bg-white/10 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
  data-text={text}
>
  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
  </svg>
  <span class="copy-text">Copy</span>
</button>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.copy-button');
    
    buttons.forEach(button => {
      button.addEventListener('click', async () => {
        const text = button.getAttribute('data-text');
        const copyText = button.querySelector('.copy-text');
        
        if (!text || !copyText) {
          console.error('Copy button missing required elements');
          return;
        }
        
        try {
          await navigator.clipboard.writeText(text);
          copyText.textContent = 'Copied!';
          setTimeout(() => {
            copyText.textContent = 'Copy';
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
          copyText.textContent = 'Failed';
          setTimeout(() => {
            copyText.textContent = 'Copy';
          }, 2000);
        }
      });
    });
  });
</script>
