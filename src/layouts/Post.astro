---
import Base from './Base.astro';

export interface Props {
  title: string;
  description?: string;
  date: Date;
  updated?: Date;
  tags?: string[];
  ogTitle?: string;
  ogDescription?: string;
  canonical?: string;
}

const { 
  title, 
  description, 
  date, 
  updated, 
  tags = [], 
  ogTitle, 
  ogDescription, 
  canonical 
} = Astro.props;

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-GB', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};
---

<Base 
  title={title} 
  description={description}
  ogTitle={ogTitle}
  ogDescription={ogDescription}
  canonical={canonical}
>
  <article class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="max-w-3xl">
      <header class="mb-8">
        <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-5xl">
          {title}
        </h1>
        {description && (
          <p class="mt-6 text-xl leading-8 text-gray-600 dark:text-gray-300">
            {description}
          </p>
        )}
        <div class="mt-6 flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
          <time datetime={date.toISOString()}>
            {formatDate(date)}
          </time>
          {updated && updated.getTime() !== date.getTime() && (
            <span>
              (Updated {formatDate(updated)})
            </span>
          )}
          {tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {tags.map((tag) => (
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200">
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      </header>
      
      <div class="prose prose-lg max-w-none">
        <slot />
      </div>
    </div>
  </article>
</Base>
